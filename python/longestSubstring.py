class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        The sliding window approach used in this solution allows us to      
        efficiently find the longest substring without repeating characters. 
        By updating the start index whenever we encounter a repeating character, 
        we ensure that the window always contains a valid substring. By keeping 
        track of the maximum length encountered so far, we can find the longest 
        substring in a single pass through the string.
        """

        max_length = 0
        start = 0 
        # Start represents the left boundry of the sliding window
        char_dict = {}

        for end in range(len(s)):
            # range(len(s)): generates a sequence of numbers from 0 to len(s) - 1
            # - represents the valid indidies for chars in string
            # for end in range(len(s)):  loop iterates over each index in the sequence generated by range(len(s)). 
            # In each iteration, the variable end takes the value of the current index.
            # For example: if we input abc we get the values 0,1,2 and we access them through s[end]
            if s[end] in char_dict:
                
                start = max(start, char_dict[s[end]] + 1)
                # char_dict[s[end]]: retrieves the index of the current character s[end] from the char_dict dictionary
                # char_dict[s[end]] + 1: adds one to retrived index to set new start index after the repeated character 
                # max(start, char_dict[s[end]] + 1): compares current value of start with the calculated new start index. 
                # It selects the larger value between the two (max)

            char_dict[s[end]] = end
            # char_dict[s[end]] = end: update the char_dict dictionary with the most recent index of the current character
            # s[end] encountered 
            max_length = max(max_length, end - start + 1)
            # max_length = max(max_length, end - start + 1): update the max_length variable with the maximum length of 
            # the substring without repeating characters encountered so far

        return max_length
